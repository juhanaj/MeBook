<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta name="generator" content=
"HTML Tidy for FreeBSD (vers 25 March 2009), see www.w3.org" />
<title>Free As In Freedom</title>
<link rel="stylesheet" href="css/main.css" type="text/css" />
<meta http-equiv="Content-Type" content=
"application/xhtml+xml; charset=utf-8" />
</head>
<body>
<div class="body">
<div id="chapter_212642" class="chapter">
<h2><span class="chapterHeader"><span class=
"translation">Chapter</span> <span class="count">9</span></span>
The GNU General Public License</h2>
<div class="text">
<p>By the spring of 1985, Richard Stallman had settled on the GNU
Project's first milestone-a Lisp-based free software version of
Emacs. To meet this goal, however, he faced two challenges. First,
he had to rebuild Emacs in a way that made it platform independent.
Second, he had to rebuild the Emacs Commune in a similar
fashion.</p>
<p>The dispute with UniPress had highlighted a flaw in the Emacs
Commune social contract. Where users relied on Stallman's expert
insight, the Commune's rules held. In areas where Stallman no
longer held the position of alpha hacker-pre-1984 Unix systems, for
example-individuals and companies were free to make their own
rules.</p>
<p>The tension between the freedom to modify and the freedom to
exert authorial privilege had been building before GOSMACS. The
Copyright Act of 1976 had overhauled U.S. copyright law, extending
the legal protection of copyright to software programs. According
to Section 102(b) of the Act, individuals and companies now
possessed the ability to copyright the "expression" of a software
program but not the "actual processes or methods embodied in the
program."See Hal Abelson, Mike Fischer, and Joanne Costello,
"Software and Copyright Law," updated version (1998). Translated,
programmers and companies had the ability to treat software
programs like a story or song. Other programmers could take
inspiration from the work, but to make a direct copy or
nonsatirical derivative, they first had to secure permission from
the original creator. Although the new law guaranteed that even
programs without copyright notices carried copyright protection,
programmers quickly asserted their rights, attaching coypright
notices to their software programs.</p>
<p>At first, Stallman viewed these notices with alarm. Rare was the
software program that didn't borrow source code from past programs,
and yet, with a single stroke of the president's pen, Congress had
given programmers and companies the power to assert individual
authorship over communally built programs. It also injected a dose
of formality into what had otherwise been an informal system. Even
if hackers could demonstrate how a given program's source-code
bloodlines stretched back years, if not decades, the resources and
money that went into battling each copyright notice were beyond
most hackers' means. Simply put, disputes that had once been
settled hacker-to-hacker were now settled lawyer-to-lawyer. In such
a system, companies, not hackers, held the automatic advantage.</p>
<p>Proponents of software copyright had their counter-arguments:
without copyright, works might otherwise slip into the public
domain. Putting a copyright notice on a work also served as a
statement of quality. Programmers or companies who attached their
name to the copyright attached their reputations as well. Finally,
it was a contract, as well as a statement of ownership. Using
copyright as a flexible form of license, an author could give away
certain rights in exchange for certain forms of behavior on the
part of the user. For example, an author could give away the right
to suppress unauthorized copies just so long as the end user agreed
not to create a commercial offshoot.</p>
<p>It was this last argument that eventually softened Stallman's
resistance to software copyright notices. Looking back on the years
leading up to the GNU Project, Stallman says he began to sense the
beneficial nature of copyright sometime around the release of Emacs
15.0, the last significant pre-GNU Project upgrade of Emacs. "I had
seen email messages with copyright notices plus simple 'verbatim
copying permitted' licenses," Stallman recalls. "Those definitely
were [an] inspiration."</p>
<p>For Emacs 15, Stallman drafted a copyright that gave users the
right to make and distribute copies. It also gave users the right
to make modified versions, but not the right to claim sole
ownership of those modified versions, as in the case of
GOSMACS.</p>
<p>Although helpful in codifying the social contract of the Emacs
Commune, the Emacs 15 license remained too "informal" for the
purposes of the GNU Project, Stallman says. Soon after starting
work on a GNU version of Emacs, Stallman began consulting with the
other members of the Free Software Foundation on how to shore up
the license's language. He also consulted with the attorneys who
had helped him set up the Free Software Foundation.</p>
<p>Mark Fischer, a Boston attorney specializing in
intellectual-property law, recalls discussing the license with
Stallman during this period. "Richard had very strong views about
how it should work," Fischer says, "He had two principles. The
first was to make the software absolutely as open as possible. The
second was to encourage others to adopt the same licensing
practices."</p>
<p>Encouraging others to adopt the same licensing practices meant
closing off the escape hatch that had allowed privately owned
versions of Emacs to emerge. To close that escape hatch, Stallman
and his free software colleagues came up with a solution: users
would be free to modify GNU Emacs just so long as they published
their modifications. In addition, the resulting "derivative" works
would also have carry the same GNU Emacs License.</p>
<p>The revolutionary nature of this final condition would take a
while to sink in. At the time, Fischer says, he simply viewed the
GNU Emacs License as a simple contract. It put a price tag on GNU
Emacs' use. Instead of money, Stallman was charging users access to
their own later modifications. That said, Fischer does remember the
contract terms as unique.</p>
<p>"I think asking other people to accept the price was, if not
unique, highly unusual at that time," he says.</p>
<p>The GNU Emacs License made its debut when Stallman finally
released GNU Emacs in 1985. Following the release, Stallman
welcomed input from the general hacker community on how to improve
the license's language. One hacker to take up the offer was future
software activist John Gilmore, then working as a consultant to Sun
Microsystems. As part of his consulting work, Gilmore had ported
Emacs over to SunOS, the company's in-house version of Unix. In the
process of doing so, Gilmore had published the changes as per the
demands of the GNU Emacs License. Instead of viewing the license as
a liability, Gilmore saw it as clear and concise expression of the
hacker ethos. "Up until then, most licenses were very informal,"
Gilmore recalls.</p>
<p>As an example of this informality, Gilmore cites a copyright
notice for trn, a Unix utility. Written by Larry Wall, future
creator of the Perl programming language, patch made it simple for
Unix programmers to insert source-code fixes-" patches" in hacker
jargon-into any large program. Recognizing the utility of this
feature, Wall put the following copyright notice in the program's
accompanying README file:</p>
<p>Copyright (c) 1985, Larry Wall You may copy the trn kit in whole
or in part as long as you don't try to make money off it, or
pretend that you wrote it.See Trn Kit README.
http://www.za.debian.org/doc/trn/trn-readme</p>
<p>Such statements, while reflective of the hacker ethic, also
reflected the difficulty of translating the loose, informal nature
of that ethic into the rigid, legal language of copyright. In
writing the GNU Emacs License, Stallman had done more than close up
the escape hatch that permitted proprietary offshoots. He had
expressed the hacker ethic in a manner understandable to both
lawyer and hacker alike.</p>
<p>It wasn't long, Gilmore says, before other hackers began
discussing ways to "port" the GNU Emacs License over to their own
programs. Prompted by a conversation on Usenet, Gilmore sent an
email to Stallman in November, 1986, suggesting modification: You
should probably remove "EMACS" from the license and replace it with
"SOFTWARE" or something. Soon, we hope, Emacs will not be the
biggest part of the GNU system, and the license applies to all of
it.See John Gilmore, quoted from email to author. Gilmore wasn't
the only person suggesting a more general approach. By the end of
1986, Stallman himself was at work with GNU Project's next major
milestone, a source-code debugger, and was looking for ways to
revamp the Emacs license so that it might apply to both programs.
Stallman's solution: remove all specific references to Emacs and
convert the license into a generic copyright umbrella for GNU
Project software. The GNU General Public License, GPL for short,
was born.</p>
<p>In fashioning the GPL, Stallman followed the software convention
of using decimal numbers to indicate prototype versions and whole
numbers to indicate mature versions. Stallman published Version 1.0
of the GPL in 1989 (a project Stallman was developing in 1985),
almost a full year after the release of the GNU Debugger,
Stallman's second major foray into the realm of Unix programming.
The license contained a preamble spelling out its political
intentions:</p>
<p>The General Public License is designed to make sure that you
have the freedom to give away or sell copies of free software, that
you receive source code or can get it if you want it, that you can
change the software or use pieces of it in new free programs; and
that you know you can do these things.</p>
<p>To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the
rights. These restrictions translate to certain responsibilities
for you if you distribute copies of the software, or if you modify
it.See Richard Stallman, et al., "GNU General Public License:
Version 1," (February, 1989).</p>
<p>In fashioning the GPL, Stallman had been forced to make an
additional adjustment to the informal tenets of the old Emacs
Commune. Where he had once demanded that Commune members publish
any and all changes, Stallman now demanded publication only in
instances when programmers circulated their derivative versions in
the same public manner as Stallman. In other words, programmers who
simply modified Emacs for private use no longer needed to send the
source-code changes back to Stallman. In what would become a rare
compromise of free software doctrine, Stallman slashed the price
tag for free software. Users could innovate without Stallman
looking over their shoulders just so long as they didn't bar
Stallman and the rest of the hacker community from future exchanges
of the same program.</p>
<p>Looking back, Stallman says the GPL compromise was fueled by his
own dissatisfaction with the Big Brother aspect of the original
Emacs Commune social contract. As much as he liked peering into
other hackers' systems, the knowledge that some future source-code
maintainer might use that power to ill effect forced him to temper
the GPL.</p>
<p>"It was wrong to require people to publish all changes," says
Stallman. "It was wrong to require them to be sent to one
privileged developer. That kind of centralization and privilege for
one was not consistent with a society in which all had equal
rights."</p>
<p>As hacks go, the GPL stands as one of Stallman's best. It
created a system of communal ownership within the normally
proprietary confines of copyright law. More importantly, it
demonstrated the intellectual similarity between legal code and
software code. Implicit within the GPL's preamble was a profound
message: instead of viewing copyright law with suspicion, hackers
should view it as yet another system begging to be hacked.</p>
<p>"The GPL developed much like any piece of free software with a
large community discussing its structure, its respect or the
opposite in their observation, needs for tweaking and even to
compromise it mildly for greater acceptance," says Jerry Cohen,
another attorney who helped Stallman with the creation of the
license. "The process worked very well and GPL in its several
versions has gone from widespread skeptical and at times hostile
response to widespread acceptance."</p>
<p>In a 1986 interview with Byte magazine, Stallman summed up the
GPL in colorful terms. In addition to proclaiming hacker values,
Stallman said, readers should also "see it as a form of
intellectual jujitsu, using the legal system that software hoarders
have set up against them."See David Betz and Jon Edwards, "Richard
Stallman discusses his public-domain [sic] Unix-compatible software
system with BYTE editors," BYTE (July, 1996). (Reprinted on the GNU
Project web site: http://www.gnu.org/gnu/byte-interview.html.) This
interview offers an interesting, not to mention candid, glimpse at
Stallman's political attitudes during the earliest days of the GNU
Project. It is also helpful in tracing the evolution of Stallman's
rhetoric. Describing the purpose of the GPL, Stallman says, "I'm
trying to change the way people approach knowledge and information
in general. I think that to try to own knowledge, to try to control
whether people are allowed to use it, or to try to stop other
people from sharing it, is sabotage." Contrast this with a
statement to the author in August 2000: "I urge you not to use the
term 'intellectual property' in your thinking. It will lead you to
misunderstand things, because that term generalizes about
copyrights, patents, and trademarks. And those things are so
different in their effects that it is entirely foolish to try to
talk about them at once. If you hear somebody saying something
about intellectual property, without quotes, then he's not thinking
very clearly and you shouldn't join." Years later, Stallman would
describe the GPL's creation in less hostile terms. "I was thinking
about issues that were in a sense ethical and in a sense political
and in a sense legal," he says. "I had to try to do what could be
sustained by the legal system that we're in. In spirit the job was
that of legislating the basis for a new society, but since I wasn't
a government, I couldn't actually change any laws. I had to try to
do this by building on top of the existing legal system, which had
not been designed for anything like this."</p>
<p>About the time Stallman was pondering the ethical, political,
and legal issues associated with free software, a California hacker
named Don Hopkins mailed him a manual for the 68000 microprocessor.
Hopkins, a Unix hacker and fellow science-fiction buff, had
borrowed the manual from Stallman a while earlier. As a display of
gratitude, Hopkins decorated the return envelope with a number of
stickers obtained at a local science-fiction convention. One
sticker in particular caught Stallman's eye. It read, "Copyleft
(L), All Rights Reversed." Following the release of the first
version of GPL, Stallman paid tribute to the sticker, nicknaming
the free software license "Copyleft." Over time, the nickname and
its shorthand symbol, a backwards "C," would become an official
Free Software Foundation synonym for the GPL.</p>
<p>The German sociologist Max Weber once proposed that all great
religions are built upon the "routinization" or
"institutionalization" of charisma. Every successful religion,
Weber argued, converts the charisma or message of the original
religious leader into a social, political, and ethical apparatus
more easily translatable across cultures and time.</p>
<p>While not religious per se, the GNU GPL certainly qualifies as
an interesting example of this "routinization" process at work in
the modern, decentralized world of software development. Since its
unveiling, programmers and companies who have otherwise expressed
little loyalty or allegiance to Stallman have willingly accepted
the GPL bargain at face value. A few have even accepted the GPL as
a preemptive protective mechanism for their own software programs.
Even those who reject the GPL contract as too compulsory, still
credit it as influential.</p>
<p>One hacker falling into this latter group was Keith Bostic, a
University of California employee at the time of the GPL 1.0
release. Bostic's department, the Computer Systems Research Group
(SRG), had been involved in Unix development since the late 1970s
and was responsible for many key parts of Unix, including the
TCP/IP networking protocol, the cornerstone of modern Internet
communications. By the late 1980s, AT&amp;T, the original owner of
the Unix brand name, began to focus on commercializing Unix and
began looking to the Berkeley Software Distribution, or BSD, the
academic version of Unix developed by Bostic and his Berkeley
peers, as a key source of commercial technology.</p>
<p>Although the Berkeley BSD source code was shared among
researchers and commercial programmers with a source-code license,
this commercialization presented a problem. The Berkeley code was
intermixed with proprietary AT&amp;T code. As a result, Berkeley
distributions were available only to institutions that already had
a Unix source license from AT&amp;T. As AT&amp;T raised its license
fees, this arrangement, which had at first seemed innocuous, became
increasingly burdensome.</p>
<p>Hired in 1986, Bostic had taken on the personal project of
porting BSD over to the Digital Equipment Corporation's PDP-11
computer. It was during this period, Bostic says, that he came into
close interaction with Stallman during Stallman's occasional forays
out to the west coast. "I remember vividly arguing copyright with
Stallman while he sat at borrowed workstations at CSRG," says
Bostic. "We'd go to dinner afterward and continue arguing about
copyright over dinner."</p>
<p>The arguments eventually took hold, although not in the way
Stallman would have liked. In June, 1989, Berkeley separated its
networking code from the rest of the AT&amp;T-owned operating
system and distributed it under a University of California license.
The contract terms were liberal. All a licensee had to do was give
credit to the university in advertisements touting derivative
programs.The University of California's "obnoxious advertising
clause" would later prove to be a problem. Looking for a less
restrictive alternative to the GPL, some hackers used the
University of California, replacing "University of California" with
the name of their own instution. The result: free software programs
that borrowed from dozens of other programs would have to cite
dozens of institutions in advertisements. In 1999, after a decade
of lobbying on Stallman's part, the University of California agreed
to drop this clause. In contrast to the GPL, proprietary offshoots
were permissible. Only one problem hampered the license's rapid
adoption: the BSD Networking release wasn't a complete operating
system. People could study the code, but it could only be run in
conjunction with other proprietary-licensed code.</p>
<p>Over the next few years, Bostic and other University of
California employees worked to replace the missing components and
turn BSD into a complete, freely redistributable operating system.
Although delayed by a legal challenge from Unix Systems
Laboratories-the AT&amp;T spin-off that retained ownership of the
Unix brand name-the effort would finally bear fruit in the early
1990s. Even before then, however, many of the Berkeley utilities
would make their way into Stallman's GNU Project.</p>
<p>"I think it's highly unlikely that we ever would have gone as
strongly as we did without the GNU influence," says Bostic, looking
back. "It was clearly something where they were pushing hard and we
liked the idea."</p>
<p>By the end of the 1980s, the GPL was beginning to exert a
gravitational effect on the free software community. A program
didn't have to carry the GPL to qualify as free software-witness
the case of the BSD utilities-but putting a program under the GPL
sent a definite message. "I think the very existence of the GPL
inspired people to think through whether they were making free
software, and how they would license it," says Bruce Perens,
creator of Electric Fence, a popular Unix utility, and future
leader of the Debian GNU/Linux development team. A few years after
the release of the GPL, Perens says he decided to discard Electric
Fence's homegrown license in favor of Stallman's lawyer-vetted
copyright. "It was actually pretty easy to do," Perens recalls.</p>
<p>Rich Morin, the programmer who had viewed Stallman's initial GNU
announcement with a degree of skepticism, recalls being impressed
by the software that began to gather under the GPL umbrella. As the
leader of a SunOS user group, one of Morin's primary duties during
the 1980s had been to send out distribution tapes containing the
best freeware or free software utilities. The job often mandated
calling up original program authors to verify whether their
programs were copyright protected or whether they had been
consigned to the public domain. Around 1989, Morin says, he began
to notice that the best software programs typically fell under the
GPL license. "As a software distributor, as soon as I saw the word
GPL, I knew I was home free," recalls Morin.</p>
<p>To compensate for the prior hassles that went into compiling
distribution tapes to the Sun User Group, Morin had charged
recipients a convenience fee. Now, with programs moving over to the
GPL, Morin was suddenly getting his tapes put together in half the
time, turning a tidy profit in the process. Sensing a commercial
opportunity, Morin rechristened his hobby as a business: Prime Time
Freeware.</p>
<p>Such commercial exploitation was completely within the confines
of the free software agenda. "When we speak of free software, we
are referring to freedom, not price," advised Stallman in the GPL's
preamble. By the late 1980s, Stallman had refined it to a more
simple mnemonic: "Don't think free as in free beer; think free as
in free speech."</p>
<p>For the most part, businesses ignored Stallman's entreaties.
Still, for a few entrepreneurs, the freedom associated with free
software was the same freedom associated with free markets. Take
software ownership out of the commercial equation, and you had a
situation where even the smallest software company was free to
compete against the IBMs and DECs of the world.</p>
<p>One of the first entrepreneurs to grasp this concept was Michael
Tiemann, a software programmer and graduate student at Stanford
University. During the 1980s, Tiemann had followed the GNU Project
like an aspiring jazz musician following a favorite artist. It
wasn't until the release of the GNU C Compiler in 1987, however,
that he began to grasp the full potential of free software. Dubbing
GCC a "bombshell," Tiemann says the program's own existence
underlined Stallman's determination as a programmer.</p>
<p>"Just as every writer dreams of writing the great American
novel, every programmer back in the 1980s talked about writing the
great American compiler," Tiemman recalls. "Suddenly Stallman had
done it. It was very humbling."</p>
<p>"You talk about single points of failure, GCC was it," echoes
Bostic. "Nobody had a compiler back then, until GCC came
along."</p>
<p>Rather than compete with Stallman, Tiemann decided to build on
top of his work. The original version of GCC weighed in at 110,000
lines of code, but Tiemann recalls the program as surprisingly easy
to understand. So easy in fact that Tiemann says it took less than
five days to master and another week to port the software to a new
hardware platform, National Semiconductor's 32032 microchip. Over
the next year, Tiemann began playing around with the source code,
creating a native compiler for the C+ programming language. One
day, while delivering a lecture on the program at Bell Labs,
Tiemann ran into some AT&amp;T developers struggling to pull off
the same thing.</p>
<p>"There were about 40 or 50 people in the room, and I asked how
many people were working on the native code compiler," Tiemann
recalls. "My host said the information was confidential but added
that if I took a look around the room I might get a good general
idea."</p>
<p>It wasn't long after, Tiemann says, that the light bulb went off
in his head. "I had been working on that project for six months,"
Tiemann says. I just thought to myself, whether it's me or the code
this is a level of efficiency that the free market should be ready
to reward."</p>
<p>Tiemann found added inspiration in the GNU Manifesto, which,
while excoriating the greed of some software vendors, encourages
other vendors to consider the advantages of free software from a
consumer point of view. By removing the power of monopoly from the
commerical software question, the GPL makes it possible for the
smartest vendors to compete on the basis of service and consulting,
the two most profit-rich corners of the software marketplace.</p>
<p>In a 1999 essay, Tiemann recalls the impact of Stallman's
Manifesto. "It read like a socialist polemic, but I saw something
different. I saw a business plan in disguise."7. See Michael
Tiemann, "Future of Cygnus Solutions: An Entrepreneur's Account,"
Open Sources (O'Reilly &amp; Associates, Inc., 1999): 139.</p>
<p>Teaming up with John Gilmore, another GNU Project fan, Tiemann
launched a software consulting service dedicated to customizing GNU
programs. Dubbed Cygnus Support, the company signed its first
development contract in February, 1990. By the end of the year, the
company had $725,000 worth of support and development
contracts.</p>
<p>GNU Emacs, GDB, and GCC were the "big three" of
developer-oriented tools, but they weren't the only ones developed
by Stallman during the GNU Project's first half decade. By 1990,
Stallman had also generated GNU versions of the Bourne Shell
(rechristened the Bourne Again Shell, or BASH), YACC (rechristened
Bison), and awk (rechristened gawk). Like GCC , every GNU program
had to be designed to run on multiple systems, not just a single
vendor's platform. In the process of making programs more flexible,
Stallman and his collaborators often made them more useful as
well.</p>
<p>Recalling the GNU universalist approach, Prime Time Freeware's
Morin points to a critical, albeit mundane, software package called
hello. "It's the hello world program which is five lines of C,
packaged up as if it were a GNU distribution," Morin says. "And so
it's got the Texinfo stuff and the configure stuff. It's got all
the other software engineering goo that the GNU Project has come up
with to allow packages to port to all these different environments
smoothly. That's tremendously important work, and it affects not
only all of [Stallman's] software, but also all of the other GNU
Project software."</p>
<p>According to Stallman, improving software programs was secondary
to building them in the first place. "With each piece I may or may
not find a way to improve it," said Stallman to Byte. "To some
extent I am getting the benefit of reimplementation, which makes
many systems much better. To some extent it's because I have been
in the field a long time and worked on many other systems. I
therefore have many ideas to bring to bear."See Richard Stallman,
BYTE (1986).</p>
<p>Nevertheless, as GNU tools made their mark in the late 1980s,
Stallman's AI Lab-honed reputation for design fastidiousness soon
became legendary throughout the entire software-development
community.</p>
<p>Jeremy Allison, a Sun user during the late 1980s and programmer
destined to run his own free software project, Samba, in the 1990s,
recalls that reputation with a laugh. During the late 1980s,
Allison began using Emacs. Inspired by the program's
community-development model, Allison says he sent in a snippet of
source code only to have it rejected by Stallman.</p>
<p>"It was like the Onion headline," Allison says. "'Child's
prayers to God answered: No.'"</p>
<p>Stallman's growing stature as a software programmer, however,
was balanced by his struggles as a project manager. Although the
GNU Project moved from success to success in creation of
developer-oriented tools, its inability to generate a working
kernel-the central "traffic cop" program in all Unix systems that
determines which devices and applications get access to the
microprocessor and when-was starting to elicit grumbles as the
1980s came to a close. As with most GNU Project efforts, Stallman
had started kernel development by looking for an existing program
to modify. According to a January 1987 "Gnusletter," Stallman was
already working to overhaul TRIX, a Unix kernel developed at
MIT.</p>
<p>A review of GNU Project "GNUsletters" of the late 1980s reflects
the management tension. In January, 1987, Stallman announced to the
world that the GNU Project was working to overhaul TRIX, a Unix
kernel developed at MIT. A year later, in February of 1988, the GNU
Project announced that it had shifted its attentions to Mach, a
lightweight "micro-kernel" developed at Carnegie Mellon. All told,
however, official GNU Project kernel development wouldn't commence
until 1990.See "HURD History."</p>
<p>The delays in kernel development were just one of many concerns
weighing on Stallman during this period. In 1989, Lotus Development
Corporation filed suit against rival software company, Paperback
Software International, for copying menu commands in Lotus' popular
1-2-3 Spreadsheet program. Lotus' suit, coupled with the Apple
-Microsoft "look and feel" battle, provided a troublesome backdrop
for the GNU Project. Although both suits fell outside the scope of
the GNU Project, both revolved around operating systems and
software applications developed for the personal computer, not
Unix-compatible hardware systems-they threatened to impose a
chilling effect on the entire culture of software development.
Determined to do something, Stallman recruited a few programmer
friends and composed a magazine ad blasting the lawsuits. He then
followed up the ad by helping to organize a group to protest the
corporations filing the suit. Calling itself the League of
Programming Freedom, the group held protests outside the offices of
Lotus, Inc. and the Boston courtroom hosting the Lotus trial.</p>
<p>The protests were notable.According to a League of Programming
Freedom Press, the protests were notable for featuring the first
hexadecimal protest chant: 1-2-3-4, toss the lawyers out the door;
5-6-7-8, innovate don't litigate; 9-A-B-C, 1-2-3 is not for me;
D-E-F-O, look and feel have got to go.</p>
<p>They document the evolving nature of software industry.
Applications had quietly replaced operating systems as the primary
corporate battleground. In its unfulfilled quest to build a free
software operating system, the GNU Project seemed hopelessly behind
the times. Indeed, the very fact that Stallman had felt it
necessary to put together an entirely new group dedicated to
battling the "look and feel" lawsuits reinforced that obsolescence
in the eyes of some observers.</p>
<p>In 1990, the John D. and Catherine T. MacArthur Foundation
cerified Stallman's genius status when it granted Stallman a
MacArthur fellowship, therefore making him a recipient for the
organization's so-called "genius grant." The grant, a $240,000
reward for launching the GNU Project and giving voice to the free
software philosophy, relieved a number of short-term concerns.
First and foremost, it gave Stallman, a nonsalaried employee of the
FSF who had been supporting himself through consulting contracts,
the ability to devote more time to writing GNU code.I use the term
"writing" here loosely. About the time of the MacArthur award,
Stallman began suffering chronic pain in his hands and was
dictating his work to FSF-employed typists. Although some have
speculated that the hand pain was the result of repetitive stress
injury, or RSI, an injury common among software programmers,
Stallman is not 100% sure. "It was NOT carpal tunnel syndrome," he
writes. "My hand problem was in the hands themselves, not in the
wrists." Stallman has since learned to work without typists after
switching to a keyboard with a lighter touch.</p>
<p>Ironically, the award also made it possible for Stallman to
vote. Months before the award, a fire in Stallman's apartment house
had consumed his few earthly possessions. By the time of the award,
Stallman was listing himself as a "squatter"See Reuven Lerner,
"Stallman wins $240,000 MacArthur award," MIT, The Tech (July 18,
1990). "[The registrar of voters] didn't want to accept that as my
address," Stallman would later recall. "A newspaper article about
the MacArthur grant said that and then they let me register."See
Michael Gross, "Richard Stallman: High School Misfit, Symbol of
Free Software, MacArthur-certified Genius" (1999).</p>
<p>Most importantly, the MacArthur money gave Stallman more
freedom. Already dedicated to the issue of software freedom,
Stallman chose to use the additional freedom to increase his
travels in support of the GNU Project mission.</p>
<p>Interestingly, the ultimate success of the GNU Project and the
free software movement in general would stem from one of these
trips. In 1990, Stallman paid a visit to the Polytechnic University
in Helsinki, Finland. Among the audience members was 21-year-old
Linus Torvalds, future developer of the Linux kernel-the free
software kernel destined to fill the GNU Project's most sizable
gap.</p>
<p>A student at the nearby University of Helsinki at the time,
Torvalds regarded Stallman with bemusement. "I saw, for the first
time in my life, the stereotypical long-haired, bearded hacker
type," recalls Torvalds in his 2001 autobiography Just for Fun. "We
don't have much of them in Helsinki."See Linus Torvalds and David
Diamond, Just For Fun: The Story of an Accidentaly Revolutionary
(HarperCollins Publishers, Inc., 2001): 58-59.</p>
<p>While not exactly attuned to the "sociopolitical" side of the
Stallman agenda, Torvalds nevertheless appreciated the agenda's
underlying logic: no programmer writes error-free code. By sharing
software, hackers put a program's improvement ahead of individual
motivations such as greed or ego protection.</p>
<p>Like many programmers of his generation, Torvalds had cut his
teeth not on mainframe computers like the IBM 7094, but on a motley
assortment of home-built computer systems. As university student,
Torvalds had made the step up from C programming to Unix, using the
university's MicroVAX. This ladder-like progression had given
Torvalds a different perspective on the barriers to machine access.
For Stallman, the chief barriers were bureaucracy and privilege.
For Torvalds, the chief barriers were geography and the harsh
Helsinki winter. Forced to trek across the University of Helsinki
just to log in to his Unix account, Torvalds quickly began looking
for a way to log in from the warm confines of his off-campus
apartment.</p>
<p>The search led Torvalds to the operating system Minix, a
lightweight version of Unix developed for instructional purposes by
Dutch university professor Andrew Tanenbaum. The program fit within
the memory confines of a 386 PC, the most powerful machine Torvalds
could afford, but still lacked a few necessary features. It most
notably lacked terminal emulation, the feature that allowed
Torvalds' machine to mimic a university terminal, making it
possible to log in to the MicroVAX from home.</p>
<p>During the summer of 1991, Torvalds rewrote Minix from the
ground up, adding other features as he did so. By the end of the
summer, Torvalds was referring to his evolving work as the
"GNU/Emacs of terminal emulation programs."See Linus Torvalds and
David Diamond, Just For Fun: The Story of an Accidentaly
Revolutionary (HarperCollins Publishers, Inc., 2001): 78. Feeling
confident, he solicited a Minix newsgroup for copies of the POSIX
standards, the software blue prints that determined whether a
program was Unix compatible. A few weeks later, Torvalds was
posting a message eerily reminiscent of Stallman's original 1983
GNU posting:</p>
<p>Hello everybody out there using minix-</p>
<p>I'm doing a (free) operating system (just a hobby, won't be big
and professional like gnu for 386 (486) AT clones). This has been
brewing since April, and is starting to get ready. I'd like any
feedback on things people like/dislike in minix, as my OS resembles
it somewhat (same physical layout of the file-system (due to
practical reasons) among other things).See "Linux 10th
Anniversary."</p>
<p>The posting drew a smattering of responses and within a month,
Torvalds had posted a 0.01 version of the operating system-i.e.,
the earliest possible version fit for outside review-on an Internet
FTP site. In the course of doing so, Torvalds had to come up with a
name for the new system. On his own PC hard drive, Torvalds had
saved the program as Linux, a name that paid its respects to the
software convention of giving each Unix variant a name that ended
with the letter X. Deeming the name too "egotistical," Torvalds
changed it to Freax, only to have the FTP site manager change it
back.</p>
<p>Although Torvalds had set out build a full operating system,
both he and other developers knew at the time that most of the
functional tools needed to do so were already available, thanks to
the work of GNU, BSD, and other free software developers. One of
the first tools the Linux development team took advantage of was
the GNU C Compiler, a tool that made it possible to process
programs written in the C programming language.</p>
<p>Integrating GCC improved the performance of Linux. It also
raised issues. Although the GPL's "viral" powers didn't apply to
the Linux kernel, Torvald's willingness to borrow GCC for the
purposes of his own free software operating system indicated a
certain obligation to let other users borrow back. As Torvalds
would later put it: "I had hoisted myself up on the shoulders of
giants."See Linus Torvalds and David Diamond, Just For Fun: The
Story of an Accidentaly Revolutionary (HarperCollins Publishers,
Inc., 2001): 96-97. Not surprisingly, he began to think about what
would happen when other people looked to him for similar support. A
decade after the decision, Torvalds echoes the Free Software
Foundation's Robert Chassel when he sums up his thoughts at the
time: You put six months of your life into this thing and you want
to make it available and you want to get something out of it, but
you don't want people to take advantage of it. I wanted people to
be able to see [Linux], and to make changes and improvements to
their hearts' content. But I also wanted to make sure that what I
got out of it was to see what they were doing. I wanted to always
have access to the sources so that if they made improvements, I
could make those improvements myself.See Linus Torvalds and David
Diamond, Just For Fun: The Story of an Accidentaly Revolutionary
(HarperCollins Publishers, Inc., 2001): 94-95. When it was time to
release the 0.12 version of Linux, the first to include a fully
integrated version of GCC, Torvalds decided to voice his allegiance
with the free software movement. He discarded the old kernel
license and replaced it with the GPL. The decision triggered a
porting spree, as Torvalds and his collaborators looked to other
GNU programs to fold into the growing Linux stew. Within three
years, Linux developers were offering their first production
release, Linux 1.0, including fully modified versions of GCC, GDB,
and a host of BSD tools.</p>
<p>By 1994, the amalgamated operating system had earned enough
respect in the hacker world to make some observers wonder if
Torvalds hadn't given away the farm by switching to the GPL in the
project's initial months. In the first issue of Linux Journal,
publisher Robert Young sat down with Torvalds for an interview.
When Young asked the Finnish programmer if he felt regret at giving
up private ownership of the Linux source code, Torvalds said no.
"Even with 20/20 hindsight," Torvalds said, he considered the GPL
"one of the very best design decisions" made during the early
stages of the Linux project.See Robert Young, "Interview with
Linus, the Author of Linux," Linux Journal (March 1, 1994).</p>
<p>That the decision had been made with zero appeal or deference to
Stallman and the Free Software Foundation speaks to the GPL's
growing portability. Although it would take a few years to be
recognized by Stallman, the explosiveness of Linux development
conjured flashbacks of Emacs. This time around, however, the
innovation triggering the explosion wasn't a software hack like
Control-R but the novelty of running a Unix-like system on the PC
architecture. The motives may have been different, but the end
result certainly fit the ethical specifications: a fully functional
operating system composed entirely of free software.</p>
<p>As his initial email message to the comp.os.minix newsgroup
indicates, it would take a few months before Torvalds saw Linux as
anything less than a holdover until the GNU developers delivered on
the HURD kernel. This initial unwillingness to see Linux in
political terms would represent a major blow to the Free Software
Foundation.</p>
<p>As far as Torvalds was concerned, he was simply the latest in a
long line of kids taking apart and reassembling things just for
fun. Nevertheless, when summing up the runaway success of a project
that could have just as easily spent the rest of its days on an
abandoned computer hard drive, Torvalds credits his younger self
for having the wisdom to give up control and accept the GPL
bargain.</p>
<p>"I may not have seen the light," writes Torvalds, reflecting on
Stallman's 1991 Polytechnic University speech and his subsequent
decision to switch to the GPL. "But I guess something from his
speech sunk in ."See Linus Torvalds and David Diamond, Just For
Fun: The Story of an Accidentaly Revolutionary (HarperCollins
Publishers, Inc., 2001): 59. interview offers an interesting, not
to mention candid, glimpse at Stallman's political attitudes during
the earliest days of the GNU Project. It is also helpful in tracing
the evolution of Stallman's rhetoric. Describing the purpose of the
GPL, Stallman says, "I'm trying to change the way people approach
knowledge and information in general. I think that to try to own
knowledge, to try to control whether people are allowed to use it,
or to try to stop other people from sharing it, is sabotage."
Contrast this with a statement to the author in August 2000: "I
urge you not to use the term 'intellectual property' in your
thinking. It will lead you to misunderstand things, because that
term generalizes about copyrights, patents, and trademarks. And
those things are so different in their effects that it is entirely
foolish to try to talk about them at once. If you hear somebody
saying something about intellectual property, without quotes, then
he's not thinking very clearly and you shouldn't join."</p>
</div>
</div>
</div>
</body>
</html>
